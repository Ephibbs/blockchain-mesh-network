import java.awt.Color;
import java.awt.Component;
import java.awt.Graphics;
import java.io.IOException;
import java.io.Serializable;
import java.security.InvalidKeyException;
import java.security.KeyPair;
import java.security.KeyPairGenerator;
import java.security.NoSuchAlgorithmException;
import java.security.NoSuchProviderException;
import java.security.PrivateKey;
import java.security.PublicKey;
import java.security.SecureRandom;
import java.security.Signature;
import java.security.SignatureException;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.Hashtable;
import java.util.Random;

/*
 * Subclass of Node, simulation specific
 * Parameters: ID string
 */

/* TODO
 * When I am sending a message, I should try and verify the header of the message
 * but I am not sure if that would work or not because then someone could
 * possible alter the contents of it without having to alter the signature.
 */

public class SimulationNode implements Node {
	// Variables
		public int xCoordinate = 0;
		public int yCoordinate = 0;
		public Color color = Color.BLUE;
		public int WIDTH = 0;
		public String nodeID = null;
		public Random rand = new Random();
		public HashMap<String, Integer> myResources = new HashMap<String, Integer>();
		
		//Encryption Set
		public ArrayList<PublicKey> publicKeySet = new ArrayList<PublicKey>();
		public KeyPairGenerator keyGen = null;
		public SecureRandom random = null;
		public Signature dsa = null;
		public KeyPair pair = null;
		public PrivateKey privKey = null;
		public PublicKey pubKey = null;
		public byte[] byteArray = new byte[1024];
		
		//Blockchain
		public Blockchain blockChain;
		public ArrayList<String> blockRequestIDs = new ArrayList<String>();
		
		//keep track of messages
		public ArrayList<Message> openRequests = new ArrayList<Message>();
		public ArrayList<Message> bidsToMyRequests = new ArrayList<Message>();
		public ArrayList<Message> myResourceAgreements = new ArrayList<Message>();
		public ArrayList<Message> myResourceSents = new ArrayList<Message>();
		public ArrayList<Message> myResourceReceives = new ArrayList<Message>();
		public ArrayList<TextMessage> myTextMsgs = new ArrayList<TextMessage>();
		public ArrayList<String> allMsgIDs = new ArrayList<String>();
		public HashMap<String, Message> msgMap = new HashMap<String, Message>();
		
	public ArrayList<SimulationNode> simulationNetworkNodes = new ArrayList<SimulationNode>();

	// Constructor
	public SimulationNode(String id) throws NoSuchAlgorithmException, NoSuchProviderException {
		
	}

	// Accessors
	public Color getColor() {
		return this.color;
	}

	public int getXCoord() {
		return this.xCoordinate;
	}

	public int getYCoord() {
		return this.yCoordinate;
	}

	public int getWidth() {
		return this.WIDTH;
	}

	public void setNodeValues(int xVal, int yVal, Color myColor, int width)
			throws NoSuchAlgorithmException, NoSuchProviderException {
		this.xCoordinate = xVal;
		this.yCoordinate = yVal;
		this.color = myColor;
		this.WIDTH = width;
	}

	public void setColor(Color myColor) {
		this.color = myColor;
	}

	public void moveNode(int maxSize, int offset, int movement, Graphics g) {
		g.setColor(Color.LIGHT_GRAY);
		g.fillOval(this.xCoordinate, this.yCoordinate, this.WIDTH, this.WIDTH);

		int randomX = rand.nextInt(movement);
		int randomY = rand.nextInt(movement);
		int direction = rand.nextInt(4);
		int maxChecker = maxSize - offset;
		if ((this.xCoordinate + randomX) > maxChecker) {
			this.xCoordinate = this.xCoordinate - 40;
			// System.out.println("I got here");
			// this.xCoordinate = this.xCoordinate +
			// (randomX-(maxChecker-this.xCoordinate));
		}
		if ((this.xCoordinate - randomX) < 20) {
			this.xCoordinate = this.xCoordinate + 25;
			// System.out.println("I got here");
			// this.xCoordinate = this.xCoordinate - (randomX-(this.xCoordinate
			// - offset));
		}
		if ((this.yCoordinate + randomY) > maxChecker) {
			// System.out.println("I got here");
			this.yCoordinate = this.yCoordinate - 40;
			// this.yCoordinate = this.yCoordinate +
			// (randomY-(maxChecker-this.yCoordinate));
		}
		if ((this.yCoordinate + randomY) < 100) {
			// System.out.println("I got here");
			this.yCoordinate = this.yCoordinate + 25;
			// this.yCoordinate = this.yCoordinate - (randomY-(this.yCoordinate
			// - offset));
		} else {
			if (direction == 0) {
				this.xCoordinate = this.xCoordinate + randomX;
				this.yCoordinate = this.yCoordinate + randomY;
			} else if (direction == 1) {
				this.xCoordinate = this.xCoordinate - randomX;
				this.yCoordinate = this.yCoordinate + randomY;
			} else if (direction == 2) {
				this.xCoordinate = this.xCoordinate + randomX;
				this.yCoordinate = this.yCoordinate - randomY;
			} else {
				this.xCoordinate = this.xCoordinate - randomX;
				this.yCoordinate = this.yCoordinate - randomY;
			}
		}
	}

	public void addSimulationNode(SimulationNode node) {
		simulationNetworkNodes.add(node);
	}
	
	
	// Utility
	public void Draw(Graphics g) {
		g.setColor(this.color);
		g.fillOval(this.xCoordinate, this.yCoordinate, this.WIDTH, this.WIDTH);
	}

	public void drawLinesToFriends(Graphics g) {
		g.setColor(Color.BLACK);
		for (int i = 0; i < this.simulationNetworkNodes.size(); i++) {
			SimulationNode friend = simulationNetworkNodes.get(i);
			g.drawLine(this.xCoordinate + this.WIDTH / 2, this.yCoordinate + this.WIDTH / 2,
					friend.getXCoord() + this.WIDTH / 2, friend.getYCoord() + this.WIDTH / 2);
		}
	}
	public void addNodes(ArrayList<SimulationNode> newNodes) { // add a group of friend
		// nodes
		for (int i = 0; i < newNodes.size(); i++) {
			simulationNetworkNodes.add(newNodes.get(i));
		}
	}
	
	//Block Request Protocol
	
	public void receiveBlock(BlockDelivery bd) {
		String hash = bd.getHash();
		Block b = bd.getBlock();
		String nodeID = bd.getAuthor();
		if (blockRequestIDs.contains(hash + nodeID)) {
			blockRequestIDs.remove(hash + nodeID);
			if (nodeID == this.nodeID) {
				blockChain.add(b);
			} else {
				broadcastBlock();
			}
		}
	}
	
	public void makeBlockRequest(BlockRequest br) {
		for (int i = 0; i < simulationNetworkNodes.size(); i++) { // distribute
			// blockrequest to
			// friend nodes (they
			// will propagate to
			// their friends if they
			// cannot resolve)
			simulationNetworkNodes.get(i).requestBlock(br);
		}
	}

	public void broadcastBlock(BlockDelivery bd) {
		for (int i = 0; i < simulationNetworkNodes.size(); i++) { // distribute
			// blockrequest to
			// friend nodes (they
			// will propagate to
			// their friends if they
			// cannot resolve)
			simulationNetworkNodes.get(i).receiveBlock(bd);
		}
	}
	
	public void requestBlock(BlockRequest br) {
		String hash = br.getHash();
		String id = br.getAuthor();
		if (!blockRequestIDs.contains(hash + id)) {
			blockRequestIDs.add(hash + id);
			Block b = blockChain.getBlock(hash);
			if (b != null) {
				BlockDelivery bd = new BlockDelivery(b, id);
				broadcastBlock(b, id);
			} else {
				makeBlockRequest(br);
			}
		}
	}
	
	//Utils
	
	public String randomMessageNumberGenerator(){
		String messageNum = "";
		ArrayList<String> charPossibilities = new ArrayList<String>();
		charPossibilities.add("a");
		charPossibilities.add("b");
		charPossibilities.add("c");
		charPossibilities.add("d");
		charPossibilities.add("e");
		charPossibilities.add("f");
		charPossibilities.add("g");
		charPossibilities.add("h");
		charPossibilities.add("i");
		charPossibilities.add("j");
		charPossibilities.add("k");
		charPossibilities.add("l");
		charPossibilities.add("m");
		charPossibilities.add("n");
		charPossibilities.add("o");
		charPossibilities.add("p");
		charPossibilities.add("q");
		charPossibilities.add("r");
		charPossibilities.add("s");
		charPossibilities.add("t");
		charPossibilities.add("u");		
		charPossibilities.add("v");
		charPossibilities.add("w");
		charPossibilities.add("x");
		charPossibilities.add("y");
		charPossibilities.add("z");
		charPossibilities.add("0");
		charPossibilities.add("1");
		charPossibilities.add("2");
		charPossibilities.add("3");
		charPossibilities.add("4");
		charPossibilities.add("5");
		charPossibilities.add("6");
		charPossibilities.add("7");
		charPossibilities.add("8");
		charPossibilities.add("9");
		
		for(int i = 0; i < 10;i++){
			int ranNum = rand.nextInt(charPossibilities.size());
			messageNum = messageNum + charPossibilities.get(i);
		}
		//System.out.println(messageNum);
		return messageNum;
	}
	public void printNodes() {
		for (int i = 0; i < simulationNetworkNodes.size(); i++) { // print out friend
			// nodes
			System.out.println(simulationNetworkNodes.get(i).getNodeID());
		}
	}
	
	public void distributeMessage(Message text) {
		for (int i = 0; i < simulationNetworkNodes.size(); i++) { // distribute message to
			// friend nodes (they
			// will propagate to
			// their friends)
			simulationNetworkNodes.get(i).addMessage(text);
		}
	}

	public void distributeSignedMessage(byte[] realSig, byte[] byteArray2, TextMessage text)
			throws NoSuchAlgorithmException, NoSuchProviderException, InvalidKeyException, SignatureException {
		// TODO Auto-generated method stub
		for (int i = 0; i < simulationNetworkNodes.size(); i++) { // give each friend node
			// the signed message,
			// saved in their
			// localMSG
			simulationNetworkNodes.get(i).addSignedMessage(realSig, byteArray2, text);
		}
	}

	public void distributePublicKey(PublicKey publicKey) {
		for (int i = 0; i < simulationNetworkNodes.size(); i++) { // add public key to all
			// friend nodes (they
			// will propagate to
			// their friends)
			simulationNetworkNodes.get(i).addPublicKey(publicKey);
		}
	}

	public void addSignedMessage(byte[] realSig, byte[] byteArray2, TextMessage text)
			throws NoSuchAlgorithmException, NoSuchProviderException, InvalidKeyException, SignatureException {
		Signature sig = Signature.getInstance("SHA1withDSA", "SUN");
		for (int i = 0; i < publicKeySet.size(); i++) { // find public key that
			// can verify message
			sig.initVerify(publicKeySet.get(i));
			sig.update(byteArray2);
			boolean verifies = sig.verify(realSig);

			if (verifies == true) { // if verified and unique, add to localMSG
				// and distribute friend nodes
				if (!myTextMsgs.contains(text)) {
					myTextMsgs.add(text);
					this.distributeSignedMessage(realSig, byteArray2, text);
					return;
				}
			} else {
			}
		}
	}

	public void addPublicKey(PublicKey publicKey) {
		// TODO Auto-generated method stub
		if (this.publicKeySet.contains(publicKey)) { // if public key is unique,
			// add and distribute to
			// friend nodes
			// do nothing
		} else {
			this.publicKeySet.add(publicKey);
			this.distributePublicKey(publicKey);
		}
	}
	
	public void distributeBlock(Block b) {
		for (int i = 0; i < simulationNetworkNodes.size(); i++) { // add block to friend
			// node's blockchain
			simulationNetworkNodes.get(i).blockChain.add(b);
		}
	}
	public void addResource(String type, int amount) {
		String resourceType = type.toLowerCase();
		if (myResources.containsKey(resourceType)) {
			myResources.replace(resourceType, amount + myResources.get(resourceType));
		} else {
			myResources.put(resourceType, amount);
		}
	}

	public HashMap<String, Integer> getResources() {
		return this.myResources;
	}

	// Accessors
	public String getNodeID() {
		return nodeID;
	}

	public PublicKey getPublicKey() {
		return this.pubKey;
	}

	// Mutators
	public void addMessage(Message msg) {
		// if message is unique, add and
		// distribute
		// do nothing
		if (msg != null && !this.msgMap.containsKey(msg)) {
			this.blockChain.add(msg);
			switch(msg.getMessageType()) {
				case "ResourceRequest":
					openRequests.add(msg);
					break;
				case "ResourceRequestBid":
					bidsToMyRequests.add(msg);
					break;
				case "ResourceAgreement":
					myResourceAgreements.add(msg);
					break;
				case "ResourceSent":
					myResourceSents.add(msg);
					break;
				case "ResourceReceived":
					myResourceReceives.add(msg);
					break;
			}
			msgMap.put(msg.getID(), msg);
			distributeMessage(msg);
		}
	}

	public void setBlockChainDifficulty(int difficulty) {
		blockChain.setDifficulty(difficulty);
	}

	// Utility
	public void start() {
		blockChain.start();
	}

	public boolean isOnline() {
		return true;
	}

	public void addBlock(Block b) {
		blockChain.add(b);
	}

	// Accessors
	public ArrayList<Message> getOpenRequests() {
		return openRequests;
	}
	
	public ArrayList<Message> getBids(){
		return this.bidsToMyRequests;
	}

	@Override
	public ArrayList<Message> getBidsToMyRequests() {
		// TODO Auto-generated method stub
		return null;
	}
}
