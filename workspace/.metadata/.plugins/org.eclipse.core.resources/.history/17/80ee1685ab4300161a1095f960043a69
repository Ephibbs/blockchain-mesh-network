import acm.program.*;
import acm.graphics.*;
import acm.util.*;

import java.awt.Canvas;
import java.awt.Color;
import java.awt.Dimension;
import java.awt.Font;
import java.awt.Graphics;
import java.awt.event.*;
import java.security.NoSuchAlgorithmException;
import java.security.NoSuchProviderException;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.Random;
import java.util.Set;

import javax.swing.*;

public class BluetoothGUI extends Program{

	public static final int TEXT_FIELD_SIZE = 15;
	public static final int MAXMOVE = 50;
	public static final int MAXSIZE = 800;
	public static final int MAXSIZEW = 800;

	public JTextField resourceAmount;
	public JTextField resourceType;
	public JTextField resourceCategory;
	public JTextField acceptNumber;
	public JTextField bidNumber;
	public JTextField amount;
	public JTextField eta;
	public JTextField viewResources;
	public JTextField sentResource;
	public JTextField receiveResource;
	public JTextField shortestPathTo;

	public ArrayList<NetworkNode> networkNodes = new ArrayList<NetworkNode>();

	public Canvas canvas = new Canvas();
	public Random rand = new Random();
	public Graphics g = this.canvas.getGraphics();
	public NetworkNode myNode = null;

	/**
	 * This method has the responsibility for initializing the interactors in
	 * the application, and taking care of any other initialization that needs
	 * to be performed.
	 */
	@Override
	public void init() {
		this.setSize(new Dimension(1800, 850));
		generateWestFrame();
		addActionListeners();
		addListeners();
		add(this.canvas);
		try {
			myNode = new NetworkNode("Me");
		} catch (NoSuchAlgorithmException | NoSuchProviderException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
		myNode.start();
	}

	// Don't worry about these
	private void addListeners() {
		this.resourceType.addActionListener(this);
		this.resourceAmount.addActionListener(this);
		this.resourceCategory.addActionListener(this);
		this.bidNumber.addActionListener(this);
		this.amount.addActionListener(this);
		this.eta.addActionListener(this);
		this.viewResources.addActionListener(this);
		this.sentResource.addActionListener(this);
	}

	// Just the window, don't worry about it
	private void generateWestFrame() {
		add(new JButton("Start My Node"), WEST);

		add(new JLabel("Enter resource Requester"), WEST);
		add(new JLabel("Enter the Supply"), WEST);
		this.resourceType = new JTextField(TEXT_FIELD_SIZE);
		add(this.resourceType, WEST);
		add(new JLabel("Enter the Amount"), WEST);
		this.resourceAmount = new JTextField(TEXT_FIELD_SIZE);
		add(this.resourceAmount, WEST);
		add(new JLabel("Enter the Category"), WEST);
		this.resourceCategory = new JTextField(TEXT_FIELD_SIZE);
		add(this.resourceCategory, WEST);
		add(new JButton("Request Resources"), WEST);

		add(new JLabel("Message Number"), WEST);
		this.acceptNumber = new JTextField(TEXT_FIELD_SIZE);
		add(this.acceptNumber, WEST);
		add(new JLabel("ETA"), WEST);
		this.eta = new JTextField(TEXT_FIELD_SIZE);
		add(this.eta, WEST);
		add(new JLabel("Amount"), WEST);
		this.amount = new JTextField(TEXT_FIELD_SIZE);
		add(this.amount, WEST);
		add(new JButton("Generate Bid"), WEST);

		add(new JLabel("Bid Number"), WEST);
		this.bidNumber = new JTextField(TEXT_FIELD_SIZE);
		add(this.bidNumber, WEST);

		add(new JButton("Accept Bid"), WEST);

//		this.removeNode = new JTextField(TEXT_FIELD_SIZE);
//		add(this.removeNode, WEST);
//		add(new JButton("Remove Node"), WEST);
//
//		add(new JButton("Move Nodes"), WEST);

		add(new JButton("Check Accepted"), WEST);
		add(new JButton("Check Bids"), WEST);

		add(new JButton("Check Requests"), WEST);

//		this.viewResources = new JTextField(TEXT_FIELD_SIZE);
//		add(this.viewResources, WEST);
//		add(new JButton("View Resources"), WEST);
		
		add(new JButton("Put Initial Resources"), NORTH);
		
		this.viewResources = new JTextField(TEXT_FIELD_SIZE);
		add(this.viewResources, NORTH);
		add(new JButton("View Resources"), NORTH);
		
		this.sentResource = new JTextField(TEXT_FIELD_SIZE);
		add(this.sentResource, NORTH);
		add(new JButton("Send Resource"), NORTH);
		
		this.receiveResource = new JTextField(TEXT_FIELD_SIZE);
		add(this.receiveResource, NORTH);
		add(new JButton("Receive Resource"), NORTH);
		
		this.shortestPathTo = new JTextField(TEXT_FIELD_SIZE);
		add(this.shortestPathTo, NORTH);
		add(new JButton("Show Fastest Path"), NORTH);
		
		add(new JButton("Ping Everybody"), WEST);
	}

	
	//initialize
	@Override
	public void actionPerformed(ActionEvent e) {
		if (e.getActionCommand().equals("Start My Node")) {
			beginSimulation();
			myNode.start();
		} else if (e.getActionCommand().equals("Request Resources")) {
			try {
				generateResourceRequest();
			} catch (NoSuchAlgorithmException | NoSuchProviderException e1) {
				e1.printStackTrace();
			}
		} else if (e.getActionCommand().equals("Generate Bid")) {
			generateBid();
		} else if (e.getActionCommand().equals("Accept Bid")) {
			acceptBid();
		} else if (e.getActionCommand().equals("Check Accepted")) {
			generateAcceptedMessages();
		} else if (e.getActionCommand().equals("Check Bids")) {
			checkBids();
		} else if (e.getActionCommand().equals("Check Requests")) {
			checkRequests();
		} else if (e.getActionCommand().equals("View Resources")) {
			viewNodesResources(this.viewResources.getText());
		} else if (e.getActionCommand().equals("Send Resource")) {
			sendResource();
		} else if (e.getActionCommand().equals("Receive Resource")) {
			receiveResource();
		} else if (e.getActionCommand().equals("Check Resources")) {
			receiveResource();
		}
	}

	private void putInitResources() {
		for(int i = 0; i < this.networkNodes.size();i++){
			NetworkNode thisNode = (NetworkNode) this.networkNodes.get(i);
			thisNode.getResources().put("water", 500);
			thisNode.getResources().put("medical supplies", 20);
			thisNode.getResources().put("food", 300);
			thisNode.getResources().put("blankets", 100);
			thisNode.getResources().put("tents", 50);
		}
	}

	private void viewNodesResources(String nodeName) {
		generateNodesResourcesBoard();
		for (int i = 0; i < this.networkNodes.size(); i++) {
			if (this.networkNodes.get(i).getNodeID().equals(nodeName)) {
				HashMap<String, Integer> nodeResources = this.networkNodes.get(i).getResources();
				Set<String> nodesR = nodeResources.keySet();
				int o = 0;
				for (String key: nodesR) {
					String resourceName = key;
					String resourceAmount = "" + nodeResources.get(key);
					g.drawString(resourceName, 5 , 75 + o*25);
					g.drawString(resourceAmount,  10 + 0/5, 75+o*25);
					g.drawLine(0, 78 + o*25, MAXSIZE, 78 + o*25);
					o++;
				}
			}
		}
	}


	//Message Generation
	private void generateResourceRequest() throws NoSuchAlgorithmException, NoSuchProviderException {
		ResourceRequest newRequest = new ResourceRequest(Integer.parseInt(this.resourceAmount.getText()), 
				this.resourceType.getText(), myNode.getNodeID());
		
		myNode.addMessage(newRequest);
	}

	private void generateBid() {
		String messageID = this.acceptNumber.getText();
		int eta =  Integer.parseInt(this.eta.getText());
		int amount = Integer.parseInt(this.amount.getText());
		ResourceRequestBid newBid = new ResourceRequestBid(messageID, eta, 
				amount, myNode.getNodeID());
		
		myNode.addMessage(newBid);
	}

	private void acceptBid() {
		String bidID = this.bidNumber.getText();
		ResourceAgreement ra = new ResourceAgreement(bidID, myNode.getNodeID());
		myNode.addMessage(ra);
	}

	private void sendResource() {
		String sendResourceID = this.sentResource.getText();
		NetworkNode thisNode = (NetworkNode) this.myNode;

		ResourceSent rs = new ResourceSent(sendResourceID, myNode.getNodeID());
		
		myNode.addMessage(rs);
	}

	private void receiveResource() {
		String sendID = this.sentResource.getText();
		ResourceReceived rr = new ResourceReceived(sendID, myNode.getNodeID());
		myNode.addMessage(rr);
	}

	
	//Generate GUI
	private void displayBids() {
		g.setColor(Color.WHITE);
		if (myNode.getBidsToMyRequests() != null) {
			for (int i = 0; i < myNode.getBidsToMyRequests().size(); i++) {
				ResourceRequestBid rrbid = (ResourceRequestBid) myNode.getBidsToMyRequests().get(i);
				String bidID = rrbid.requestID;
				String eta = "" + rrbid.eta;
				String resourceAmount = "" + rrbid.amount;
				String bidder = rrbid.author;
				g.drawString(bidID,  5, 40 + i * 20);
				g.drawString(eta,  5 + MAXSIZE / 4, 40 + i * 20);
				g.drawString(resourceAmount,  5 + 2 * MAXSIZE / 4, 40 + i * 20);
				g.drawString(bidder, 5 + 3 * MAXSIZE / 4, 40 + i * 20);
			}
		}
	}

	private void checkBids() {
		generateBidMessageBoard();
		displayBids();
	}
	
	private void checkRequests() {
		generateMessageBoard();
		g.setColor(Color.WHITE);
		ArrayList<Message> availableMessages = myNode.getOpenRequests();
		for (int i = 0; i < availableMessages.size(); i++) {
			ResourceRequest rr = (ResourceRequest) availableMessages.get(i);
			String requestID = rr.id;
			String resourceRequested = rr.type;
			String resourceAmount = "" + rr.amount;
			String originator = rr.getAuthor();
			g.drawString(requestID,  5, 40 + i * 20);
			g.drawString(resourceRequested, 5 + MAXSIZE / 4, 40 + i * 20);
			g.drawString(resourceAmount, 5 + 2 * MAXSIZE / 4, 40 + i * 20);
			g.drawString(originator, 5 + 3 * MAXSIZE / 4, 40 + i * 20);
		}
	}
	
	private void generateAcceptedMessages() {
		generateAcceptedMessageBoard();
		g.setColor(Color.WHITE);
		if (myNode.getMyResourceAgreements() != null) {
			ArrayList<Message> resourceAgreements = new ArrayList<Message>(myNode.getMyResourceAgreements());
			for (int i = 0; i < resourceAgreements.size(); i++) {
				ResourceAgreement rrAgree = (ResourceAgreement) resourceAgreements.get(i);
				ResourceRequestBid rrbid = (ResourceRequestBid) myNode.msgMap.get(rrAgree.resourceBidID);
				String messageNumber = rrAgree.resourceBidID;
				String resourceRequested = rrbid.type;
				String resourceAmount = "" + rrbid.amount;
				String destination = rrbid.author;
				g.drawString(messageNumber,  5, 40 + i * 20);
				g.drawString(resourceRequested,  5 + MAXSIZE / 4, 40 + i * 20);
				g.drawString(resourceAmount,  5 + 2 * MAXSIZE / 4, 40 + i * 20);
				g.drawString(destination,  5 + 3 * MAXSIZE / 4, 40 + i * 20);
			}
		}
	}

	private void generateBidMessageBoard() {
		g.setColor(Color.DARK_GRAY);
		g.fillRect(MAXSIZE, 0, MAXSIZE, MAXSIZE);

		g.setColor(Color.WHITE);
		g.drawRect(0 + MAXSIZE, 0, MAXSIZE / 4, MAXSIZE);
		g.drawRect(MAXSIZE / 4 + MAXSIZE, 0, MAXSIZE / 4, MAXSIZE);
		g.drawRect(2 * MAXSIZE / 4 + MAXSIZE, 0, MAXSIZE / 4, MAXSIZE);
		g.drawRect(3 * MAXSIZE / 4 + MAXSIZE, 0, MAXSIZE / 4, MAXSIZE);

		g.setFont(new Font("TimesRoman", Font.PLAIN, 20));
		g.setColor(Color.WHITE);
		g.drawString("Bid Number", MAXSIZE + 5, 20);
		g.drawString("Time of Arrival", MAXSIZE + 5 + MAXSIZE / 4, 20);
		g.drawString("Amount Can Send", MAXSIZE + 5 + 2 * MAXSIZE / 4, 20);
		g.drawString("Bidder", MAXSIZE + 5 + 3 * MAXSIZE / 4, 20);
		g.drawLine(MAXSIZE, 25, 2 * MAXSIZE, 25);
	}

	private void generateAcceptedMessageBoard() {
		g.setColor(Color.DARK_GRAY);
		g.fillRect(MAXSIZE, 0, MAXSIZE, MAXSIZE);

		g.setColor(Color.WHITE);
		g.drawRect(0 + MAXSIZE, 0, MAXSIZE / 4, MAXSIZE);
		g.drawRect(MAXSIZE / 4 + MAXSIZE, 0, MAXSIZE / 4, MAXSIZE);
		g.drawRect(2 * MAXSIZE / 4 + MAXSIZE, 0, MAXSIZE / 4, MAXSIZE);
		g.drawRect(3 * MAXSIZE / 4 + MAXSIZE, 0, MAXSIZE / 4, MAXSIZE);

		g.setFont(new Font("TimesRoman", Font.PLAIN, 20));
		g.setColor(Color.WHITE);
		g.drawString("Message Number", MAXSIZE + 5, 20);
		g.drawString("Resource Requested", MAXSIZE + 5 + MAXSIZE / 4, 20);
		g.drawString("Amount Requested", MAXSIZE + 5 + 2 * MAXSIZE / 4, 20);
		g.drawString("Destination", MAXSIZE + 5 + 3 * MAXSIZE / 4, 20);
		g.drawLine(MAXSIZE, 25, 2 * MAXSIZE, 25);
	}

	private void generateNodesResourcesBoard() {
		g.setColor(Color.DARK_GRAY);
		g.fillRect(MAXSIZE, 0, MAXSIZE, MAXSIZE);

		g.setColor(Color.WHITE);
		g.drawRect(0 , 0, MAXSIZE / 5, MAXSIZE);
		g.drawRect(MAXSIZE / 5, 0, 4 * MAXSIZE / 5, MAXSIZE);

		g.setFont(new Font("TimesRoman", Font.PLAIN, 20));
		g.setColor(Color.WHITE);
		g.drawString(this.viewResources.getText() + "'s resources at Location ", 5 + 2 * MAXSIZE / 5, 20);
		g.drawString("Resource Name", 5, 45);
		g.drawString("Quantity", 5 + MAXSIZE / 5, 45);
		g.drawLine(0, 25,  MAXSIZE, 25);
		g.drawLine(0, 50,  MAXSIZE, 50);

	}

	private void generateMessageBoard() {
		g.setColor(Color.DARK_GRAY);
		g.fillRect(0, 0, MAXSIZE, MAXSIZE);

		g.setColor(Color.WHITE);
		g.drawRect(0 + 0, 0, MAXSIZE / 4, MAXSIZE);
		g.drawRect(MAXSIZE / 4, 0, MAXSIZE / 4, MAXSIZE);
		g.drawRect(2 * MAXSIZE / 4 + 0, 0, MAXSIZE / 4, MAXSIZE);
		g.drawRect(3 * MAXSIZE / 4 + 0, 0, MAXSIZE / 4, MAXSIZE);

		g.setFont(new Font("TimesRoman", Font.PLAIN, 20));
		g.setColor(Color.WHITE); // Here
		g.drawString("Message Number", 5, 20);
		g.drawString("Resource Requested", 5 + MAXSIZE / 4, 20);
		g.drawString("Amount Requested", 5 + 2 * MAXSIZE / 4, 20);
		g.drawString("Originator", 5 + 3 * MAXSIZE / 4, 20);
		g.drawLine(0, 25, MAXSIZE, 25);
	}

	private void beginSimulation() {
		this.g = this.canvas.getGraphics();
//		g.setColor(Color.LIGHT_GRAY);
//		g.fillRect(0, 0, MAXSIZE, MAXSIZE);
		g.setColor(Color.BLACK);

		generateMessageBoard();
	}

	private void sendMessage(String message, String sender, String receiver)
			throws NoSuchAlgorithmException, NoSuchProviderException {
		NetworkNode senderNode = myNode;
		NetworkNode receiverNode = null;
		Message currentMessage = null;
		for (int i = 0; i < networkNodes.size(); i++) {
			String nodeNameRec = "Node" + networkNodes.get(i).nodeID;
			if (networkNodes.get(i).nodeID.equals(receiver)) {
				receiverNode = networkNodes.get(i);
				//currentMessage = new TextMessage(message, receiverNode.getNodeID());
				myNode.addMessage(currentMessage);
			}
		}
	}

}