import java.io.*;
import javax.bluetooth.*;
import javax.bluetooth.UUID;
import javax.microedition.io.*;
import java.util.*;

/*
 * This class connects with node servers around it and sends text to them
 */
public class BluetoothClient implements Runnable {

    private String SERVICE_UUID_STRING = "5F6C6A6E1CFA49B49C831E0D1C9B9DC9";
    private ArrayList<UUID> SERVICE_UUIDS = new ArrayList<UUID>();
    private UUID SERVICE_UUID = new UUID(SERVICE_UUID_STRING, false);
    private int maxNumAttempts;

    private LocalDevice localDevice;
    private DiscoveryAgent discoveryAgent;
    private ArrayList<String> outQ = new ArrayList<String>();
    private Thread t;
    
    BluetoothClient() {
       	/*
    	 * make sure only the line with your name at the end of it has "//" at the beginning of it
    	 */
    	//SERVICE_UUIDS.add(new UUID("5F6C6A6E1CFA49B49C831E0D1C9B9DC1", false)); //Colby
    	//SERVICE_UUIDS.add(new UUID("5F6C6A6E1CFA49B49C831E0D1C9B9DC2", false)); //Natalie
    	//SERVICE_UUIDS.add(new UUID("5F6C6A6E1CFA49B49C831E0D1C9B9DC3", false)); //Andrew
    	//SERVICE_UUIDS.add(new UUID("5F6C6A6E1CFA49B49C831E0D1C9B9DC4", false)); //Dylan
    	SERVICE_UUIDS.add(new UUID("5F6C6A6E1CFA49B49C831E0D1C9B9DC5", false)); //Evan
    	//SERVICE_UUIDS.add(new UUID("5F6C6A6E1CFA49B49C831E0D1C9B9DC6", false)); //Will
    	/*
    	 * END
    	 */
    	maxNumAttempts = 3;
    }
    
    public void broadcast(String s) throws IOException {
    	outQ.add(s);
    }
    public void start() {
    	try {
			localDevice = LocalDevice.getLocalDevice();
		} catch (BluetoothStateException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
        discoveryAgent = localDevice.getDiscoveryAgent();
        
        t = new Thread(this, "bluetooth client");
		t.start();
    }
    public void send(UUID uuid, String s) throws IOException {
    	for(int numAttempts = 0; numAttempts < maxNumAttempts; numAttempts++) {
    		System.out.println("attempt");
	    	String connectionUrl = discoveryAgent.selectService(uuid, ServiceRecord.NOAUTHENTICATE_NOENCRYPT, false);
	        if(connectionUrl != null) {
		    	System.out.println("Connecting to " + connectionUrl);
		
		        StreamConnection sc = (StreamConnection) Connector.open(connectionUrl);
		
		        RemoteDevice remoteDevice = RemoteDevice.getRemoteDevice(sc);
		        String remoteAddress = remoteDevice.getBluetoothAddress();
		
		        String remoteName = "NetworkNode";
		        try {
		            remoteName = remoteDevice.getFriendlyName(false);
		        }
		        catch (IOException e) {
		            System.err.println("Unable to get remote device name");
		        }
		
		        System.out.println("Connection opened to " + remoteAddress);
		
		        //BufferedReader consoleReader = new BufferedReader(new InputStreamReader(System.in));
		        BufferedReader reader = new BufferedReader(new InputStreamReader(sc.openDataInputStream()));
		        PrintWriter writer = new PrintWriter(new OutputStreamWriter(sc.openDataOutputStream()));
		       
		        writer.println(s);
		        writer.flush();
		        System.out.println("Sent: " + remoteName + " (" + remoteAddress + "): " + s);
		
		        sc.close();
		        break;
	        }
    	}
    }
}

