import javax.bluetooth.*;
import javax.bluetooth.UUID;
import javax.microedition.io.*;

import java.io.*;
import java.security.InvalidKeyException;
import java.security.NoSuchAlgorithmException;
import java.security.NoSuchProviderException;
import java.security.SignatureException;
import java.util.*;

/*
 * This class connects with node servers around it and sends text to them
 */
public class BluetoothClient implements Runnable {

    private String SERVICE_UUID_STRING = "5F6C6A6E1CFA49B49C831E0D1C9B9DC9";
    private ArrayList<UUID> SERVICE_UUIDS = new ArrayList<UUID>();
    private UUID SERVICE_UUID = new UUID(SERVICE_UUID_STRING, false);
    private int maxNumAttempts;
    private ArrayList<String> delQ;

    private LocalDevice localDevice;
    private DiscoveryAgent discoveryAgent;
    private ArrayList<Message> outQ = new ArrayList<Message>();
    private Thread t;
    public boolean verbose = true;
    
    BluetoothClient() {
       	/*
    	 * make sure only the line with your name at the end of it has "//" at the beginning of it
    	 */
    	//SERVICE_UUIDS.add(new UUID("5F6C6A6E1CFA49B49C831E0D1C9B9DC1", false)); //Colby
    	//SERVICE_UUIDS.add(new UUID("5F6C6A6E1CFA49B49C831E0D1C9B9DC2", false)); //Natalie
    	SERVICE_UUIDS.add(new UUID("5F6C6A6E1CFA49B49C831E0D1C9B9DC3", false)); //Andrew
    	//SERVICE_UUIDS.add(new UUID("5F6C6A6E1CFA49B49C831E0D1C9B9DC4", false)); //Dylan
    	//SERVICE_UUIDS.add(new UUID("5F6C6A6E1CFA49B49C831E0D1C9B9DC5", false)); //Evan
    	//SERVICE_UUIDS.add(new UUID("5F6C6A6E1CFA49B49C831E0D1C9B9DC6", false)); //Will
    	/*
    	 * END
    	 */
    	maxNumAttempts = 3;
    }
    
    public void start() {
    	t = new Thread(this, "bluetooth client");
		t.start();
    }
    
    public void run() {
    	Message s;
    	if(verbose) System.out.println("running client");
    	while(true) {
    		//if(verbose) System.out.println("WifiClient still running...\noutQ: "+outQ.toString());
			for(int i=outQ.size()-1;i>-1;i--) {
				s = outQ.get(i);
				//if(verbose) System.out.println("Broadcasting out message with id: "+s.getID());
				broadcast(s);
				outQ.remove(s);
				try {
					Thread.sleep(1000);
				} catch (InterruptedException e) {
					// TODO Auto-generated catch block
					e.printStackTrace();
				}
			}
			try {
				Thread.sleep(1000);
			} catch (InterruptedException e) {
				// TODO Auto-generated catch block
				e.printStackTrace();
			}
    	}
    }
    
    public void addToOutQ(Message m) throws IOException {
    	outQ.add(m);
    }
    
    public void broadcast(Message s) {
    	for(UUID uuid : SERVICE_UUIDS) {
    		try {
				if(send(uuid, s)) {
					if(verbose) System.out.println("Sent message with id:  "+s.getID()+ " to: " + uuid.toString());
				} else {
					if(verbose) System.err.println("Failed to send "+s.getID() +" to "+uuid.toString());
				}
			} catch (IOException e) {
				// TODO Auto-generated catch block
				e.printStackTrace();
			}
    	}
    }
    
    private String toString( Serializable o ) throws IOException {
        ByteArrayOutputStream baos = new ByteArrayOutputStream();
        ObjectOutputStream oos = new ObjectOutputStream( baos );
        oos.writeObject( o );
        oos.close();
        return Base64.getEncoder().encodeToString(baos.toByteArray());
    }
    public boolean send(UUID uuid, Message m) throws IOException {
    	String s = toString(m);
    	for(int numAttempts = 0; numAttempts < maxNumAttempts; numAttempts++) {
    		System.out.println("attempt");
    		System.out.println(uuid);
    		System.out.println(ServiceRecord.NOAUTHENTICATE_NOENCRYPT);
	    	String connectionUrl = discoveryAgent.selectService(uuid, ServiceRecord.NOAUTHENTICATE_NOENCRYPT, false);
	        if(connectionUrl != null) {
		    	System.out.println("Connecting to " + connectionUrl);
		
		        StreamConnection sc = (StreamConnection) Connector.open(connectionUrl);
		
		        RemoteDevice remoteDevice = RemoteDevice.getRemoteDevice(sc);
		        String remoteAddress = remoteDevice.getBluetoothAddress();
		
		        String remoteName = "NetworkNode";
		        try {
		            remoteName = remoteDevice.getFriendlyName(false);
		        }
		        catch (IOException e) {
		            System.err.println("Unable to get remote device name");
		        }
		
		        System.out.println("Connection opened to " + remoteAddress);
		
		        //BufferedReader consoleReader = new BufferedReader(new InputStreamReader(System.in));
		        BufferedReader reader = new BufferedReader(new InputStreamReader(sc.openDataInputStream()));
		        PrintWriter writer = new PrintWriter(new OutputStreamWriter(sc.openDataOutputStream()));
		       
		        writer.println(s);
		        writer.flush();
		        System.out.println("Sent: " + remoteName + " (" + remoteAddress + "): " + s);
		        sc.close();
		        return true;
	        }
    	}
    	return false;
    }
}

